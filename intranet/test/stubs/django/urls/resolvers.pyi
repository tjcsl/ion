# Stubs for django.urls.resolvers (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from .exceptions import NoReverseMatch as NoReverseMatch, Resolver404 as Resolver404
from .utils import get_callable as get_callable

class ResolverMatch:
    func = ...  # type: Any
    args = ...  # type: Any
    kwargs = ...  # type: Any
    url_name = ...  # type: Any
    app_names = ...  # type: Any
    app_name = ...  # type: Any
    namespaces = ...  # type: Any
    namespace = ...  # type: Any
    view_name = ...  # type: Any
    def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None): ...
    def __getitem__(self, index): ...

def get_resolver(urlconf=None): ...
def get_ns_resolver(ns_pattern, resolver): ...

class LocaleRegexProvider:
    def __init__(self, regex): ...
    @property
    def regex(self): ...

class RegexURLPattern(LocaleRegexProvider):
    callback = ...  # type: Any
    default_args = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, regex, callback, default_args=None, name=None): ...
    def resolve(self, path): ...
    def lookup_str(self): ...

class RegexURLResolver(LocaleRegexProvider):
    urlconf_name = ...  # type: Any
    callback = ...  # type: Any
    default_kwargs = ...  # type: Any
    namespace = ...  # type: Any
    app_name = ...  # type: Any
    def __init__(self, regex, urlconf_name, default_kwargs=None, app_name=None, namespace=None): ...
    @property
    def reverse_dict(self): ...
    @property
    def namespace_dict(self): ...
    @property
    def app_dict(self): ...
    def resolve(self, path): ...
    def urlconf_module(self): ...
    def url_patterns(self): ...
    def resolve_error_handler(self, view_type): ...
    def reverse(self, lookup_view, *args, **kwargs): ...

class LocaleRegexURLResolver(RegexURLResolver):
    prefix_default_language = ...  # type: Any
    def __init__(self, urlconf_name, default_kwargs=None, app_name=None, namespace=None, prefix_default_language=True): ...
    @property
    def regex(self): ...
