# WARNING: Do not edit this file manually! Edit ci/spec.yml and run ci/regen-workflow.py.

{"on": ["push", "pull_request"], "jobs": {"tests": {"services": {"redis": {"image": "redis:latest", "ports": ["6379:6379"], "options": "--entrypoint redis-server"}, "postgres": {"image": "postgres:latest", "ports": ["5432:5432"], "env": {"POSTGRES_PASSWORD": "postgres", "POSTGRES_USER": "postgres", "POSTGRES_DB": "postgres"}, "options": "--health-cmd pg_isready --health-interval 6s --health-timeout 5s --health-retries 9"}, "rabbitmq": {"image": "rabbitmq:latest", "ports": ["5672:5672"], "options": "--health-cmd \"rabbitmqctl node_health_check\" --health-interval 6s --health-timeout 5s --health-retries 10"}}, "runs-on": "ubuntu-latest", "steps": [{"uses": "actions/checkout@v2", "name": "Set up repo"}, {"uses": "actions/setup-python@v2", "with": {"python-version": "${{ matrix.python-version }}"}, "name": "Set up Python ${{ matrix.python-version }}"}, {"uses": "actions/cache@v2", "with": {"path": "~/.cache/pip", "key": "pip-${{ matrix.python-version }}"}, "name": "Set up pip cache"}, {"run": "set -e\n\npip install -U virtualenv\nvirtualenv venv\n\nsource venv/bin/activate\n\npip install -U pip setuptools\npip install -U \\\n  flake8 pylint pylint-django pylint-plugin-utils isort~=4.3 black==20.8b1 autopep8 \\\n  coverage coveralls pyyaml\npip install -U -r requirements.txt\n\necho \"PATH=$PATH\" >> $GITHUB_ENV\necho \"VIRTUAL_ENV=$VIRTUAL_ENV\" >> $GITHUB_ENV\n", "name": "Set up venv"}, {"run": "cp intranet/settings/ci_secret.py intranet/settings/secret.py", "name": "Copy secret.py"}, {"uses": "actions/setup-node@v1", "with": {"node-version": "${{ matrix.node-version }}"}, "name": "Set up Node.js ${{ matrix.node-version }}"}, {"run": "set -e\nnpm install sass\necho \"PATH=${{ github.workspace }}/node_modules/.bin:$PATH\" >> $GITHUB_ENV\n", "name": "Install Sass and add Node modules bin to PATH"}, {"run": "set -e\nPGPASSFILE=${{ runner.temp }}/.pgpass\necho \"PGPASSFILE=$PGPASSFILE\" >> $GITHUB_ENV\necho 127.0.0.1:5432:postgres:postgres:postgres >$PGPASSFILE\nchmod 600 $PGPASSFILE\n", "name": "Set and create PGPASSFILE"}, {"run": "psql -U postgres -h 127.0.0.1 -c 'create database ion'", "name": "Create database"}, {"run": "coverage run ./setup.py test", "name": "Run tests"}, {"run": "coverage run -a ./manage.py migrate", "name": "Migrate database"}, {"run": "coverage run -a ./manage.py collectstatic --noinput -v 0", "name": "Collect static files"}, {"uses": "AndreMiras/coveralls-python-action@develop", "with": {"parallel": true}, "name": "Report coverage to Coveralls"}, {"run": "coverage xml", "name": "Build coverage XML file", "if": "github.repository_owner == 'tjcsl' && github.event_name != 'pull_request'"}, {"uses": "codacy/codacy-coverage-reporter-action@master", "with": {"coverage-reports": "coverage.xml", "project-token": "${{ secrets.CODACY_PROJECT_TOKEN }}"}, "name": "Report coverage to Codacy", "if": "github.repository_owner == 'tjcsl' && github.event_name != 'pull_request'"}], "strategy": {"matrix": {"python-version": [3.6, 3.7, 3.8], "node-version": ["12.x"]}, "fail-fast": false}}, "formatting": {"runs-on": "ubuntu-latest", "steps": [{"uses": "actions/checkout@v2", "name": "Set up repo"}, {"uses": "actions/setup-python@v2", "with": {"python-version": "${{ matrix.python-version }}"}, "name": "Set up Python ${{ matrix.python-version }}"}, {"uses": "actions/cache@v2", "with": {"path": "~/.cache/pip", "key": "pip-${{ matrix.python-version }}"}, "name": "Set up pip cache"}, {"run": "set -e\n\npip install -U virtualenv\nvirtualenv venv\n\nsource venv/bin/activate\n\npip install -U pip setuptools\npip install -U \\\n  flake8 pylint pylint-django pylint-plugin-utils isort~=4.3 black==20.8b1 autopep8 \\\n  coverage coveralls pyyaml\npip install -U -r requirements.txt\n\necho \"PATH=$PATH\" >> $GITHUB_ENV\necho \"VIRTUAL_ENV=$VIRTUAL_ENV\" >> $GITHUB_ENV\n", "name": "Set up venv"}, {"run": "cp intranet/settings/ci_secret.py intranet/settings/secret.py", "name": "Copy secret.py"}, {"run": "./scripts/build_ensure_no_changes.sh ./scripts/format.sh", "name": "Format code"}, {"run": "./scripts/build_ensure_no_changes.sh ./scripts/static_templates_format.sh", "name": "Format static files and templates"}], "strategy": {"matrix": {"python-version": [3.6, 3.7, 3.8]}, "fail-fast": false}}, "build": {"runs-on": "ubuntu-latest", "steps": [{"uses": "actions/checkout@v2", "with": {"fetch-depth": 0}, "name": "Set up repo (fetching all commits)"}, {"uses": "actions/setup-python@v2", "with": {"python-version": "${{ matrix.python-version }}"}, "name": "Set up Python ${{ matrix.python-version }}"}, {"uses": "actions/cache@v2", "with": {"path": "~/.cache/pip", "key": "pip-${{ matrix.python-version }}"}, "name": "Set up pip cache"}, {"run": "set -e\n\npip install -U virtualenv\nvirtualenv venv\n\nsource venv/bin/activate\n\npip install -U pip setuptools\npip install -U \\\n  flake8 pylint pylint-django pylint-plugin-utils isort~=4.3 black==20.8b1 autopep8 \\\n  coverage coveralls pyyaml\npip install -U -r requirements.txt\n\necho \"PATH=$PATH\" >> $GITHUB_ENV\necho \"VIRTUAL_ENV=$VIRTUAL_ENV\" >> $GITHUB_ENV\n", "name": "Set up venv"}, {"run": "cp intranet/settings/ci_secret.py intranet/settings/secret.py", "name": "Copy secret.py"}, {"run": "./scripts/build_ensure_no_changes.sh ./ci/regen-workflow.py", "name": "Regenerate workflow YAML file and check for changes"}, {"run": "./scripts/build_ensure_no_changes.sh ./scripts/build_docs.sh", "name": "Build docs"}, {"run": "./scripts/build_ensure_no_changes.sh ./scripts/build_sources.sh", "name": "Build sources"}, {"run": "./scripts/build_ensure_no_changes.sh ./ci/regen-workflow.py", "name": "Check for chenges to CI spec"}, {"run": "./scripts/build_ensure_no_changes.sh ./manage.py migrate", "name": "Check for unmigrated changes"}, {"run": "./scripts/validate-commit-messages.py ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}", "name": "Validate PR commit messages", "if": "github.event_name == 'pull_request'"}, {"run": "git fetch origin ${{ github.event.before }} && ./scripts/validate-commit-messages.py ${{ github.event.before }}..${{ github.event.after }}", "name": "Validate push commit messages", "if": "github.event_name == 'push' && (github.repository_owner != 'tjcsl' || github.ref != 'refs/heads/master' || github.ref != 'refs/heads/dev')"}, {"run": "./scripts/push_docs.sh", "name": "Push docs", "env": {"GH_TOKEN": "${{ secrets.DOCS_GH_TOKEN }}"}, "if": "github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'tjcsl'"}], "strategy": {"matrix": {"python-version": [3.6, 3.7, 3.8]}, "fail-fast": false}}, "linting": {"runs-on": "ubuntu-latest", "steps": [{"uses": "actions/checkout@v2", "name": "Set up repo"}, {"uses": "actions/setup-python@v2", "with": {"python-version": "${{ matrix.python-version }}"}, "name": "Set up Python ${{ matrix.python-version }}"}, {"uses": "actions/cache@v2", "with": {"path": "~/.cache/pip", "key": "pip-${{ matrix.python-version }}"}, "name": "Set up pip cache"}, {"run": "set -e\n\npip install -U virtualenv\nvirtualenv venv\n\nsource venv/bin/activate\n\npip install -U pip setuptools\npip install -U \\\n  flake8 pylint pylint-django pylint-plugin-utils isort~=4.3 black==20.8b1 autopep8 \\\n  coverage coveralls pyyaml\npip install -U -r requirements.txt\n\necho \"PATH=$PATH\" >> $GITHUB_ENV\necho \"VIRTUAL_ENV=$VIRTUAL_ENV\" >> $GITHUB_ENV\n", "name": "Set up venv"}, {"run": "cp intranet/settings/ci_secret.py intranet/settings/secret.py", "name": "Copy secret.py"}, {"run": "flake8 --max-line-length 150 --exclude=*/migrations/* intranet/ scripts/ docs/ *.py", "name": "Run flake8"}, {"run": "pylint --jobs=0 --disable=fixme,broad-except,global-statement,attribute-defined-outside-init,cyclic-import intranet/", "name": "Run pylint"}, {"run": "isort --check --recursive intranet", "name": "Run isort"}], "strategy": {"matrix": {"python-version": [3.6, 3.7, 3.8]}, "fail-fast": false}}, "finish_success": {"needs": ["linting", "formatting", "build", "tests"], "steps": [{"uses": "coverallsapp/github-action@master", "with": {"parallel-finished": true, "github-token": "${{ secrets.GITHUB_TOKEN }}"}, "name": "Tell Coveralls that parallel jobs have finished"}], "runs-on": "ubuntu-latest"}}, "name": "CI", "env": {"PRODUCTION": "TRUE"}, "defaults": {"run": {"shell": "bash"}}}